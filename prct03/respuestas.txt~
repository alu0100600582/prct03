21. 
    
    “\t\n”: ejecuta lo que está dentro de la variable.
    ‘\t\n’: muestra lo que esta dentro literalmente.

22. 

    El %q funciona como las comillas simples, mostrando literalmente el contenido de dentro de las llaves.
    %q{hello world\n} muestra hello world\n.
    %q{’a’ ’b’ ’c’} muestra ‘a’ ‘b’ ‘c’

23.

    El %Q funciona igual que las comillas dobles, ejecutando las órdenes que hay dentro de las llaves, tales como tabulaciones, retornos de carro, muestra de variables, etc.
    %Q{hello world\n} muestra por pantalla hello world más el retorno de carro.
    %Q{"a" "b" "c"} muestra “a” “b” “c”.

24.
    
    "--4--\n--2--\n"

25.

    "--\#{a}--\n--\#{b}--\n"
    
26.

    S[0,2]
	  => “he”
    s[-1,1]
	  => “o”
    s[0,10]
	  => “hello”

27.

    En g queda: “hello world”

28.

    Queda: “...”
    
29.

    Resultado= “222”

30.

    ["this", "is", "a", "test"]

31.

    ["\\t", "\\n"]

32.

    ["\t", "\n"]

33.

    [nil, nil, nil]

34. 

    [0, 0, 0]
    
35.

    [[1, 2], [3, 4]]
    
36.

    [0, 2, 4]

37.

    >> a = (’a’..’e’).to_a
    => ["a", "b", "c", "d", "e"]
    >> a[1,1]
    => [“b”]
    >> a[-2,2]
    => ["d", "e"]
    >> a[0..2]
    => ["a", "b", "c"]    
    >> a[0...1]
    => ["a"]
    >> a[-2..-1]
    => ["d", "e"]

38. 

    >> a
    => ["a", "b", "c", "d", "e"]
    >> a[0,2] = %w{A B}
    => ["A", "B"]
    >> a
    => ["A", "B", "c", "d", "e"]
    >> a[2..5] = %w{C D E}
    => ["C", "D", "E"]
    >> a
    => ["A", "B", "C", "D", "E"]
    >> a[0,0] = [1,2,3]
    => [1, 2, 3]
    >> a
    => [1, 2, 3, 3, "A", "B", "C", "D", "E"]
    >> a[0,2] = []
    => []
    >> a
    => [3, 3, "A", "B", "C", "D", "E"]
    >> a[-1,1] = [ ’Z’ ]
    => ["Z"]
    >> a
    => ["a", "b", "c", "d", "Z"]
    >> a[-2,2] = nil
    => nil
    >> a
    => ["a", "b", "c"]                

39. 

    >> a = (1...4).to_a
    => [1, 2, 3, 4]
    >> a = a + [4, 5]
    => [1, 2, 3, 4, 4, 5]
    >> a += [[6, 7, 8]]
    => [1, 2, 3, 4, 4, 5, [6, 7, 8]]
    >> a = a + 9
    TypeError: can't convert Fixnum into Array


40.

    >> x = %w{a b c b a}
    => ["a", "b", "c", "b", "a"]
    >> x = x - %w{b c d}
    => ["a", "a"]


41. 

    >> z = [0]*8
    => [0, 0, 0, 0, 0, 0, 0, 0]
    
42. 

    >> a = []
    => []
    >> a << 1
    => [1]
    >> a << 2 << 3
    => [1, 2, 3]
    >> a << [4, 5, 6]
    => [1, 2, 3, [4, 5, 6]]
    >> a.concat [7, 8]
    => [1, 2, 3, [4, 5, 6], 7, 8]


43. 

    >> a = [1, 1, 2, 2, 3, 3, 4]
    => [1, 1, 2, 2, 3, 3, 4]
    >> b = [5, 5, 4, 4, 3, 3, 2]
    => [5, 5, 4, 4, 3, 3, 2]
    >> c = a | b
    => [1, 2, 3, 4, 5]
    >> d = b | a
    => [5, 4, 3, 2, 1]
    >> e = a & b
    => [2, 3, 4]
    >> f = b & a
    => [4, 3, 2]

44. 

    >> a = 1..10
    => 1..10
    >> a.class
    => Range
    >> a.to_a
    => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]	
    >> b = 1...10
    => 1....10
    >> b.to_a
    => [1, 2, 3, 4, 5, 6, 7, 8, 9]
    >> b.include? 10
    => false
    >> b.include? 8
    => true
    >> b.step(2) {|x| print "#{x} " }
    => 1 3 5 7 9 => 1...10
    >> 1..3.to_a

45.

    >> r = 0...100
    => 0....100
    >> r.member? 50
    => true
    >> r.include? 99.9
    => true
    >> r.member? 99.9
    => true

46. 

    >> true.class
    => TrueClass
    >> false.class
    => FalseClass        
    >> puts "hello" if 0
    hello
    => nil
    >> puts "hello" if nil
    => nil
    >> puts "hello" if ""
    (irb):49: warning: string literal in condition           
    hello
    => nil
   

47. 

    >> x = :sym
    => :sym
    >> x.class
    =>Symbol
    >> x == ’sym’
    =>false
    >> x == :sym
    =>true
    >> z = :’a long symbol’
    => :”a long symbol”
    >> z.class
    => Symbol
    >> x == ’sym’.to_sym
    => true
    >> x.to_s == ’sym’
    => true

48. 

    >> s = "Ruby"
    => "Ruby"
    >> t = s
    => "Ruby"
    >> t[-1] = ""
    => ""
    >> print s
    Rub=> nil
    >> t = "Java"
    => "Java"
    >> print s, t
    RubJava=> nil

49.

    >> "%d %s" % [3, "rubies"]
    => “3 rubies”

50.

    >> x, y = 4, 5
    => [4, 5]
    >> z = x > y ? x : y
    => 5
    >> x,y,z = [1,2,3]
    => [1, 2, 3]
    
    
51.

    >> x = { :a => 1, :b => 2 }
    => {:a=>1, :b=>2}
    >> x.keys
    => [:a, :b]
    >> x.values
    => [1, 2]
    >> x[:c] = 3
    => 3
    >> x
    => {:a=>1, :b=>2, :c=>3}
    >> x.delete(’a’)
    => nil
    >> x
    =>{:a=>1, :b=>2, :c=>3}
    >> x.delete(:a)
    => 1
    >> x
    =>{:b=>2, :c=>3}
    >> x = { :a => 1, :b => 2, :c => 4 }
    => {:b=>2, :c=>4, :a=>1}
    >> x.delete_if { |k,v| v % 2 == 0 }
    => {:a=>1}
    >> x
    => {:a=>1}


52.  

    Hace la operación que nosotros queramos con esos valores, como por ejemplo la siguiente suma:

    >> def test
    >> yield(4,5)
    >> end
    => nil
    >> test {|a,b| puts "Resultado de la suma: #{a+b}"}
    Resultado de la suma: 9
    => nil

    
53.

    counts = Hash.new(0) crea un Hash de 0 elementos y counts={} crea un array de 0 elementos.


54.

    => ["hello", "world", "hello", "LPP"]


55.

    >>c = { :a => 3, :b => 2, :c => 1 }
    {:a=>3, :b=>2, :c=>1}
    >>c.keys.sort.each { |k| puts c[k] }
    3
    2
    1
    => [:a, :b, :c]



